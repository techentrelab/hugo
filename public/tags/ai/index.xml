<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ai on 徒然のままに</title>
    <link>http://localhost:1313/tags/ai/</link>
    <description>Recent content in Ai on 徒然のままに</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 31 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AIエージェント</title>
      <link>http://localhost:1313/posts/ai%E3%82%A8%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%B3%E3%83%88/</link>
      <pubDate>Fri, 31 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ai%E3%82%A8%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%B3%E3%83%88/</guid>
      <description>&lt;p&gt;AIエージェント（知的エージェントとも呼ばれます）とは、&lt;strong&gt;特定の目標達成のため、自律的に環境を認識し、推論し、行動を実行できる人工知能的な機能を持つシステムやプログラム&lt;/strong&gt;です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;-aiエージェントの主な特徴&#34;&gt;&lt;img src=&#34;https://fonts.gstatic.com/s/e/notoemoji/16.0/1f916/32.png&#34; alt=&#34;🤖&#34;&gt; AIエージェントの主な特徴&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;自律性&lt;/strong&gt;: 人間からの介入なしに、自分で計画を立て、タスクを実行できます。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;目標指向性&lt;/strong&gt;: 最終的な目標が設定され、その達成に向けて最適な行動を選択します。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;環境認識能力&lt;/strong&gt;: センサー、API、データなどから情報を取得し、外部環境や状況を認識します。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;適応性・学習&lt;/strong&gt;: 過去の経験や実行結果から継続的に学習し、アルゴリズムを改良してパフォーマンスを向上させます。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;-生成aiとの違い&#34;&gt;&lt;img src=&#34;https://fonts.gstatic.com/s/e/notoemoji/16.0/1f9e0/32.png&#34; alt=&#34;🧠&#34;&gt; 生成AIとの違い&lt;/h2&gt;&#xA;&lt;p&gt;AIエージェントは、近年注目されている&lt;strong&gt;大規模言語モデル（LLM）&lt;strong&gt;などの&lt;/strong&gt;生成AI&lt;/strong&gt;を基盤技術として活用することが多いですが、その役割には違いがあります。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;項目&lt;/th&gt;&#xA;          &lt;th&gt;AIエージェント&lt;/th&gt;&#xA;          &lt;th&gt;生成AI&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;主な目的&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;目標達成のための&lt;strong&gt;自律的な計画と実行&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;情報やコンテンツの&lt;strong&gt;生成&lt;/strong&gt;（文章、画像、音声など）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;動作&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;能動的（自分で判断して行動する）&lt;/td&gt;&#xA;          &lt;td&gt;受動的（指示や質問に応答する）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;能力範囲&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;意思決定、問題解決、外部ツール連携、アクション実行など幅広い&lt;/td&gt;&#xA;          &lt;td&gt;情報生成に特化&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;生成AI&lt;/strong&gt;は、AIエージェントが計画を立てたり、必要な情報を収集・分析したりするための**「頭脳」や「ツール」の一部**となり得ます。AIエージェントは、この生成AIの能力を活用し、さらに外部のシステムやツールと連携しながら、より複雑で長期的なタスクを自動で遂行します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;-活用が期待される分野&#34;&gt;&lt;img src=&#34;https://fonts.gstatic.com/s/e/notoemoji/16.0/1f6e0_fe0f/32.png&#34; alt=&#34;🛠️&#34;&gt; 活用が期待される分野&lt;/h2&gt;&#xA;&lt;p&gt;AIエージェントは、人間の作業を代行・支援することで、さまざまな分野での効率化や高度化が期待されています。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;業務の自動化&lt;/strong&gt;: データ入力、レポート作成、経費精算などの定型業務を自律的に処理し、従業員の負担を軽減。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;カスタマーサポート&lt;/strong&gt;: 顧客の問い合わせを自動で分析・対応し、複雑な場合は人間の担当者へ引き継ぐ。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;パーソナルアシスタント&lt;/strong&gt;: 個人の好みや状況に合わせて、スケジュール調整、旅行プランの提案、必要な情報の収集などを実行。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ロボット&lt;/strong&gt;: 工場や倉庫などで、人や周囲の状態を認識し、協働しながら行動を最適化する（フィジカルAI）。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Python プログラミング</title>
      <link>http://localhost:1313/posts/python-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
      <pubDate>Wed, 22 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/python-%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</guid>
      <description>&lt;p&gt;Python プログラミングに特化して、あるいは特に強く機能する人気のAIツールは&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;GitHub Copilot:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pythonとの相性:&lt;/strong&gt; PythonはCopilotが学習した大量のオープンソースコードの中でも主要な言語の一つであるため、Pythonコードの生成精度は非常に高いです。データサイエンス、Web開発（Django, Flask）、スクリプト作成など、幅広いPython用途で活躍します。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;人気の理由:&lt;/strong&gt; 関数定義の自動生成、コメントからのコード生成、テストコードの提案など、Python開発で頻繁に必要となるタスクを効率化します。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Amazon CodeWhisperer:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pythonとの相性:&lt;/strong&gt; PythonはAWSのSDKやLambda関数など、AWS環境での開発において非常に広く使われています。CodeWhispererはこれらのAWS固有のPythonコードの提案に特に強みを発揮します。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;人気の理由:&lt;/strong&gt; AWS Lambda関数、Boto3（AWS SDK for Python）を使った操作、その他AWSサービスとの連携コードを効率的に記述できます。脆弱性スキャン機能もPythonコードの品質向上に役立ちます。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tabnine:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pythonとの相性:&lt;/strong&gt; 高速なローカル補完と、Pythonの一般的なライブラリやフレームワーク（例: NumPy, Pandas, TensorFlow, Django）に特化した補完を提供します。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;人気の理由:&lt;/strong&gt; 個人のコーディングスタイルに適応しやすく、オフライン環境でも補完が可能な点がPython開発者にとって便利です。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Google Cloud Gemini (以前のDuet AI for Developers):&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pythonとの相性:&lt;/strong&gt; PythonはGoogle Cloudでも主要な言語であり、Google Cloud SDKやサービス（Compute Engine, BigQuery, Vertex AIなど）との連携コードの生成に強みがあります。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;人気の理由:&lt;/strong&gt; Google Cloud環境でPythonアプリケーションを開発する際には、特に関連性の高いコードを提案してくれます。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;python開発者がaiツールを使う際のメリット&#34;&gt;Python開発者がAIツールを使う際のメリット：&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;定型コードの削減:&lt;/strong&gt; &lt;code&gt;for&lt;/code&gt;ループ、クラスの定義、よく使うライブラリのインポート文などを素早く生成できます。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;学習の加速:&lt;/strong&gt; 新しいライブラリやフレームワークを使う際に、どのように書けばよいかAIがヒントをくれるため、学習コストを下げられます。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;エラーの削減:&lt;/strong&gt; AIが構文的に正しいコードを提案するため、単純なミスを減らせます。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;生産性の向上:&lt;/strong&gt; コードを書くスピードが上がり、より複雑なロジックや問題解決に集中する時間を増やせます。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;これらのツールは、Python開発者が日々のコーディング作業をよりスムーズかつ効率的に進めるための強力な味方となるでしょう。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;AI を活用して CSV ファイルを読み込み、それを HTML フォームで操作し、最終的にサーバーにデプロイして本番データを視覚化する&lt;/strong&gt;一連のプロセスですね。これは非常に実践的なプロジェクトで、いくつかのステップに分けて考えられます。&lt;/p&gt;&#xA;&lt;p&gt;ここでは、Python を中心としたバックエンドとシンプルな HTML/JavaScript のフロントエンド、そして一般的なサーバーデプロイの考え方を組み合わせた、具体的な手順とコードの方向性を示します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;全体の流れ:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;AI を使って CSV 読み込みと HTML フォーム生成のコードを記述 (ローカル)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Web アプリケーションの構築 (Python Flask/Streamlit など)&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CSV アップロード機能 (HTML フォーム)&lt;/li&gt;&#xA;&lt;li&gt;CSV データ処理・視覚化ロジック (Python)&lt;/li&gt;&#xA;&lt;li&gt;視覚化結果の HTML への埋め込み&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;サーバーへのデプロイ&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;本番データでの運用と視覚化&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;ステップ-1-ai-を使って-csv-読み込みと-html-フォーム生成のコードを記述-ローカル&#34;&gt;ステップ 1: AI を使って CSV 読み込みと HTML フォーム生成のコードを記述 (ローカル)&lt;/h3&gt;&#xA;&lt;p&gt;まず、AI（GitHub Copilot や Gemini など）に指示を与えて、必要なコードのひな形を生成させます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>請求書のPDF</title>
      <link>http://localhost:1313/posts/%E8%AB%8B%E6%B1%82%E6%9B%B8%E3%81%AEpdf/</link>
      <pubDate>Wed, 22 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E8%AB%8B%E6%B1%82%E6%9B%B8%E3%81%AEpdf/</guid>
      <description>&lt;p&gt;AI を使って請求書の PDF を作成する方法は、大きく分けて以下の2つのアプローチがあります。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;既存のデータから請求書を自動生成するアプローチ (最も一般的かつ実用的)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;自然言語指示から請求書の内容とデザインを生成するアプローチ (先進的・実験的)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;それぞれの方法について詳しく説明します。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-既存のデータから請求書を自動生成するアプローチ-最も一般的かつ実用的&#34;&gt;1. 既存のデータから請求書を自動生成するアプローチ (最も一般的かつ実用的)&lt;/h3&gt;&#xA;&lt;p&gt;このアプローチでは、請求に必要なデータ（顧客情報、商品名、単価、数量、日付など）が既に存在し、AI はそのデータをテンプレートにはめ込み、PDF として出力する「自動化エンジン」として機能します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;AI の活用ポイント:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;データ抽出 (RPA/OCR と LLM の組み合わせ):&lt;/strong&gt; 紙の請求書やスキャンされた請求書からデータを自動で読み取り、構造化されたデータに変換する際に AI-OCR や LLM が活用されます。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;テンプレート選択・生成 (LLM の可能性):&lt;/strong&gt; ユーザーの要望（例:「シンプルな請求書」「ロゴ入りのプロフェッショナルな請求書」）に応じて、適切な請求書テンプレートを選択または生成する。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ビジネスロジック適用 (従来のプログラミングとLLM):&lt;/strong&gt; 消費税計算、合計金額の算出、割引適用、期日の自動計算など。これは従来のプログラミングで処理されますが、複雑なロジックをLLMに指示してコード生成させることも可能です。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;最終的なPDF生成:&lt;/strong&gt; 構造化されたデータをPDF形式で出力する。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;具体的な実装方法 (Python を使用した例):&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;この場合、AI（GitHub Copilot や Gemini など）は、以下の作業を行うための Python コードの生成を支援する役割を果たします。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;必要なライブラリ:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;pandas&lt;/code&gt;: 請求データを扱うため&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;reportlab&lt;/code&gt; または &lt;code&gt;fpdf2&lt;/code&gt; または &lt;code&gt;Pillow&lt;/code&gt; と &lt;code&gt;pyfpdf&lt;/code&gt; など: Python で PDF を生成するため&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;jinja2&lt;/code&gt;: テンプレートエンジン (HTML テンプレートから PDF を生成する場合)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;weasyprint&lt;/code&gt; または &lt;code&gt;wkhtmltopdf&lt;/code&gt; (外部ツール): HTML/CSS から PDF を生成する場合&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;手順:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
